from fastai.vision.learner import *
from fastai.learner import *
from fastai.losses import *
import torch
from torch import nn
from fastai.vision.all import *
from fastai.vision.gan import *
import datetime, os
from fastai.metrics import Precision, Recall, F1Score
from fastai.interpret import ClassificationInterpretation

def simple_critic(in_size=224, n_channels=3):
    return nn.Sequential(
        nn.Conv2d(n_channels, 64, kernel_size=4, stride=2, padding=1),
        nn.LeakyReLU(0.2, inplace=True),
        nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),
        nn.LeakyReLU(0.2, inplace=True),
        nn.Flatten(),
        nn.Linear(128*56*56, 1)
    )

paths = ["/home/ariel.posada/AFGIE1/ShikataImg", 
         "/home/ariel.posada/AFGIE1/NonObfuscatedImg", 
         "/home/ariel.posada/AFGIE1/XORImg"]

sufijos = ['Shikata', 'NonObfuscated', 'XOR']

for path, sufijo in zip(paths, sufijos):
    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),
                       get_items=get_image_files,
                       splitter=RandomSplitter(valid_pct=0.2),
                       get_y=parent_label,
                       item_tfms=Resize(224))

    dls = dblock.dataloaders(path, bs=64)
    metrics = [accuracy, Precision(), Recall(), F1Score()]
    
    generator = basic_generator(in_size=224, out_size=224, n_channels=3, n_extra_layers=1)
    critic = simple_critic()

    gen_images_folder = Path(f"/home/ariel.posada/data/Gan{sufijo}Img")
    gen_images_folder.mkdir(parents=True, exist_ok=True)
    current_time = datetime.datetime.now().strftime("%Y%m%d%H%M")
    
    class SaveGeneratedImagesCallback(Callback):
        def after_epoch(self):
            fake_images = self.learn.model.generator(torch.randn(64, 100).to(self.dls.device))
            for i, img in enumerate(fake_images):
                save_image(img, gen_images_folder/f"{current_time}_epoch_{self.epoch}_img_{i}.png")
            
            # Evaluar y guardar la matriz de confusión
            interp = ClassificationInterpretation.from_learner(self.learn)
            plt.figure(figsize=(10, 10))
            interp.plot_confusion_matrix()
            plt.savefig(gen_images_folder/f"{current_time}_epoch_{self.epoch}_confusion_matrix.png")
            plt.close()

    learn_gan = GANLearner.wgan(dls, generator, critic, opt_func=partial(Adam, mom=0.), cbs=[SaveGeneratedImagesCallback()])
    learn_gan.fit(4, 2e-4)
    learn_gan.save(f'/home/ariel.posada/data/out/gan_trained_{sufijo}_{current_time}')

    # Evaluar y guardar métricas para el GAN
    print(f"Evaluating {sufijo} GAN Model:")
    loss_gan, acc_gan, prec_gan, recall_gan, f1_gan = learn_gan.validate()
    print(f"Loss: {loss_gan}, Accuracy: {acc_gan}, Precision: {prec_gan}, Recall: {recall_gan}, F1: {f1_gan}")
