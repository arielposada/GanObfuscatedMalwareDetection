from fastai.vision.all import *
from fastai.vision.gan import *
from fastai.metrics import accuracy, Precision, Recall, F1Score
import datetime, os, json
from torchvision.utils import save_image
from pathlib import Path
import matplotlib.pyplot as plt

# Verificar si CUDA está disponible y asignar el dispositivo correspondiente
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Función de activación LeakyReLU
def leaky_relu():
    return nn.LeakyReLU(0.2, inplace=True)

# Función para crear un aprendiz (learner) para el crítico de la GAN
def create_critic_learner(dls, metrics):
    critic = CustomCritic(in_size=224, n_channels=3, n_features=64, n_extra_layers=1)
    learn = Learner(dls, critic, metrics=metrics)
    return learn

# Clase para definir el crítico personalizado de la GAN
class CustomCritic(nn.Module):
    # Constructor de la clase
    def __init__(self, in_size, n_channels, n_features=64, n_extra_layers=0):
        super().__init__()
        # Definición de las capas convolucionales y la capa final lineal
        self.conv_layers = nn.Sequential(
            # Primera capa convolucional sin normalización y con LeakyReLU
            ConvLayer(n_channels, n_features, 4, 2, 1, norm_type=None, bias=False, act_cls=leaky_relu),
            # Capas convolucionales adicionales con normalización y LeakyReLU
            self._conv(n_features, n_features*2, 4, 2, 1, n_extra_layers),
            self._conv(n_features*2, n_features*4, 4, 2, 1),
            self._conv(n_features*4, n_features*8, 4, 2, 1),
            # Capa convolucional final que produce una salida única sin activación
            ConvLayer(n_features*8, 1, 4, padding=0, norm_type=None, act_cls=None, bias=False)
        )
        self.flatten = nn.Flatten()
        self.fc = nn.Linear(10*10, 1)

    # Método forward para la propagación hacia adelante
    def forward(self, x):
        x = self.conv_layers(x)
        x = self.flatten(x)
        return self.fc(x)

    # Método para crear capas convolucionales
    def _conv(self, ni, nf, ks=3, stride=2, padding=1, n_extra_layers=0):
        layers = [ConvLayer(ni, nf, ks, stride=stride, padding=padding, bias=False, norm_type=NormType.Batch, act_cls=leaky_relu)]
        for _ in range(n_extra_layers):
            layers.append(ConvLayer(nf, nf, ks, stride=1, padding=padding, bias=False, norm_type=NormType.Batch, act_cls=leaky_relu))
        return nn.Sequential(*layers)

# Clase para definir una función de pérdida adaptativa
class AdaptiveLoss(nn.Module):
    def __init__(self, crit, reduction='mean'):
        super().__init__()
        self.crit = crit
        self.reduction = reduction

    def forward(self, output, target):
        target = target.float()  # Convierte las etiquetas a float
        output = output.squeeze()  # Elimina dimensiones adicionales de la salida
        return self.crit(output, target, reduction=self.reduction)  # Usa el argumento reduction

# Rutas a los directorios de imágenes y sufijos para los nombres de los archivos
paths = ["/home/ariel.posada/AFGIE1/ShikataImg", 
         "/home/ariel.posada/AFGIE1/NonObfuscatedImg", 
         "/home/ariel.posada/AFGIE1/XORImg"]
sufijos = ['Shikata', 'NonObfuscated', 'XOR']

log_file_path = "/home/ariel.posada/data/out/log.txt"

# Bucle para procesar cada conjunto de imágenes
for path, sufijo in zip(paths, sufijos):
    # Configuración de DataBlock y DataLoaders
    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),
                       get_items=get_image_files,
                       splitter=RandomSplitter(valid_pct=0.2, seed=42),
                       get_y=parent_label,
                       item_tfms=Resize(224))
    dls = dblock.dataloaders(path, bs=64)
    dls = dls.to(device)

    # Configuración y entrenamiento de la GAN
    critic_learner = create_critic_learner(dls, metrics=[accuracy, Precision, Recall, F1Score])
    generator = basic_generator(out_size=224, n_channels=3, n_extra_layers=1)
    gen_images_folder = Path(f"/home/ariel.posada/data/Gan{sufijo}Img")
    gen_images_folder.mkdir(parents=True, exist_ok=True)
    current_time = datetime.datetime.now().strftime("%Y%m%d%H%M")

    # Clase para guardar imágenes generadas después de cada época
    class SaveGeneratedImagesCallback(Callback):
        def after_epoch(self):
            fake_images = self.learn.model.generator(torch.randn(64, 100).to(device))
            for i, img in enumerate(fake_images):
                save_image(img, gen_images_folder/f"{current_time}_epoch_{self.epoch}_img_{i}.png")

    gan = GANModule(generator, critic_learner.model)
    learn_gan = Learner(dls, gan, loss_func=AdaptiveLoss(nn.BCEWithLogitsLoss()), opt_func=partial(Adam, mom=0.), cbs=[SaveGeneratedImagesCallback()])
    learn_gan.fit(4, 2e-4)
    learn_gan.save(f'/home/ariel.posada/data/out/gan_trained_{sufijo}_{current_time}')

    # Evaluación del modelo GAN con los archivos originales y escritura de los resultados en el archivo de log
    with open(log_file_path, "a") as log_file:
        print(f"Evaluating {sufijo} GAN Model with original files:", file=log_file)
        # Asegúrate de que aquí utilizas el DataLoader correcto para la evaluación
        original_dls = dls.test_dl(get_image_files(path), with_labels=True)
        learn_gan.dls = original_dls  # Asignar el DataLoader original al learner para la evaluación
        result = learn_gan.validate(dl=original_dls)
        
        # Convertir el objeto L a una lista de Python para que sea serializable
        result_list = [item if not isinstance(item, L) else item.tolist() for item in result]
        
        # Serializar el resultado a JSON
        result_json = json.dumps({"model": sufijo, "results": result_list}, indent=4)
        print(result_json, file=log_file)

        # Matriz de confusión        
        interp = ClassificationInterpretation.from_learner(learn_gan, dl=original_dls)
        plt.figure(figsize=(6,6))
        interp.plot_confusion_matrix(title=f'Confusion Matrix {sufijo}', dpi=60)
        plt.savefig(f'/home/ariel.posada/data/out/cm_gan_trained_{sufijo}_{current_time}.png')