from fastai.vision.all import *
from fastai.vision.gan import *
from fastai.metrics import accuracy, Precision, Recall, F1Score
import datetime
from torchvision.utils import save_image
from pathlib import Path
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import numpy as np
import sys

# Establecer el límite para el número de líneas de traceback a None para mostrar todo el traceback
sys.tracebacklimit = None

# Verificar si CUDA está disponible y asignar el dispositivo correspondiente
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Función de activación LeakyReLU
def leaky_relu():
    return nn.LeakyReLU(0.2, inplace=True)

# Clase para definir el crítico personalizado de la GAN
class CustomCritic(nn.Module):
    def __init__(self, in_size, n_channels, n_features=64, n_extra_layers=0):
        super().__init__()
        self.conv_layers = nn.Sequential(
            ConvLayer(n_channels, n_features, 4, 2, 1, norm_type=None, bias=False, act_cls=leaky_relu),
            self._conv(n_features, n_features*2, 4, 2, 1, n_extra_layers),
            self._conv(n_features*2, n_features*4, 4, 2, 1),
            self._conv(n_features*4, n_features*8, 4, 2, 1),
            ConvLayer(n_features*8, 1, 4, padding=0, norm_type=None, act_cls=None, bias=False)
        )
        self.flatten = nn.Flatten()
        self.fc = nn.Linear(10*10, 1)

    def forward(self, x):
        x = self.conv_layers(x)
        x = self.flatten(x)
        return self.fc(x)

    def _conv(self, ni, nf, ks=3, stride=2, padding=1, n_extra_layers=0):
        layers = [ConvLayer(ni, nf, ks, stride=stride, padding=padding, bias=False, norm_type=NormType.Batch, act_cls=leaky_relu)]
        for _ in range(n_extra_layers):
            layers.append(ConvLayer(nf, nf, ks, stride=1, padding=padding, bias=False, norm_type=NormType.Batch, act_cls=leaky_relu))
        return nn.Sequential(*layers)

# Función para crear un aprendiz (learner) para el crítico con fines de clasificación
def create_critic_classifier_learner(dls, metrics):
    critic = CustomCritic(in_size=224, n_channels=3, n_features=64, n_extra_layers=1)
    critic.fc = nn.Linear(critic.fc.in_features, 2)
    learn = Learner(dls, critic, metrics=metrics, loss_func=nn.CrossEntropyLoss())
    return learn

# Rutas a los directorios de imágenes y sufijos para los nombres de los archivos
paths = ["/home/ariel.posada/AFGIE1/ShikataImg", 
         "/home/ariel.posada/AFGIE1/NonObfuscatedImg", 
         "/home/ariel.posada/AFGIE1/XORImg"]
sufijos = ['Shikata', 'NonObfuscated', 'XOR']

log_file_path = "/home/ariel.posada/data/out/log.txt"

# Bucle para procesar cada conjunto de imágenes
for path, sufijo in zip(paths, sufijos):
    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),
                       get_items=get_image_files,
                       splitter=RandomSplitter(valid_pct=0.2, seed=42),
                       get_y=parent_label,
                       item_tfms=Resize(224))
    dls = dblock.dataloaders(path, bs=64)
    dls = dls.to(device)

    critic_learner = create_critic_classifier_learner(dls, metrics=[accuracy])
    generator = basic_generator(out_size=224, n_channels=3, n_extra_layers=1)
    gen_images_folder = Path(f"/home/ariel.posada/data/Gan{sufijo}Img")
    gen_images_folder.mkdir(parents=True, exist_ok=True)
    current_time = datetime.datetime.now().strftime("%Y%m%d%H%M")

    class SaveGeneratedImagesCallback(Callback):
        def after_epoch(self):
            fake_images = self.learn.model.generator(torch.randn(64, 100).to(device))
            for i, img in enumerate(fake_images):
                save_image(img, gen_images_folder/f"{current_time}_epoch_{self.epoch}_img_{i}.png")

    gan = GANModule(generator, critic_learner.model)

    learn_gan = Learner(dls, gan, loss_func=AdaptiveLoss(nn.BCEWithLogitsLoss()), opt_func=partial(Adam, mom=0.), cbs=[SaveGeneratedImagesCallback()])
    learn_gan.fit(4, 2e-4)

    learn_gan.save(f'/home/ariel.posada/data/out/gan_trained_{sufijo}_{current_time}')

    path_to_pretrained_model = f'/home/ariel.posada/data/out/gan_trained_{sufijo}_{current_time}.pth'
    state_dict = torch.load(path_to_pretrained_model, map_location=device)

    critic_state_dict = {k.replace('critic.', ''): v for k, v in state_dict.items() if k.startswith('critic')}
    critic_learner.model.load_state_dict(critic_state_dict)

    critic_learner.fit_one_cycle(4, 2e-4)

    critic_learner.save(f'/home/ariel.posada/data/out/critic_classifier_{sufijo}_{current_time}')

    with open(log_file_path, "a") as log_file:
        print(f"Evaluating {sufijo} Critic Classifier Model with original files:", file=log_file)
        original_dls = dls.test_dl(get_image_files(path), with_labels=True)
        critic_learner.dls = original_dls
        preds, targs = critic_learner.get_preds(dl=original_dls)

        cm = confusion_matrix(targs.numpy(), preds.argmax(dim=1).numpy())

        fig, ax = plt.subplots(figsize=(6,6))
        ax.matshow(cm, cmap=plt.cm.Blues, alpha=0.7)
        for i in range(cm.shape[0]):
            for j in range(cm.shape[1]):
                ax.text(x=j, y=i, s=cm[i, j], va='center', ha='center')

        categories = dls.vocab
        ax.set_xticklabels([''] + categories)
        ax.set_yticklabels([''] + categories)

        plt.xlabel('Predicted')
        plt.ylabel('True')
        plt.title(f'Confusion Matrix {sufijo}')

        plt.savefig(f'/home/ariel.posada/data/out/cm_critic_classifier_{sufijo}_{current_time}.png')
        plt.close()
