from fastai.vision.all import *

# Definir la ruta de los datos
path = '/home/ariel.posada/AFGIE1/NonObfuscatedImg' # Reemplaza con la ruta a tus datos

# Crear un DataBlock para clasificación binaria y tarea de GAN
malware_block = DataBlock(blocks=(ImageBlock, CategoryBlock),
                          get_items=get_image_files,
                          splitter=RandomSplitter(seed=42,valid_pct=0.2),
                          get_y=parent_label,
                          item_tfms=Resize(460),
                          batch_tfms=[*aug_transforms(size=448), Normalize.from_stats(*imagenet_stats)])

# Cargar los datos
dls = malware_block.dataloaders(path)

# Definir el generador más complejo
class ComplexGenerator(nn.Module):
    def __init__(self, noise_sz=100, nf=256):
        super().__init__()
        self.layers = nn.Sequential(
            nn.ConvTranspose2d(noise_sz, nf * 8, 4, 1, 0, bias=False),
            nn.BatchNorm2d(nf * 8),
            nn.ReLU(),
            nn.ConvTranspose2d(nf * 8, nf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(nf * 4),
            nn.ReLU(),
            nn.ConvTranspose2d(nf * 4, nf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(nf * 2),
            nn.ReLU(),
            nn.ConvTranspose2d(nf * 2, nf, 4, 2, 1, bias=False),
            nn.BatchNorm2d(nf),
            nn.ReLU(),
            nn.ConvTranspose2d(nf, 3, 4, 2, 1, bias=False),
            nn.Tanh()
        )

    def forward(self, x):
        return self.layers(x)

# Definir la GAN con ResNet18 como discriminador y ComplexGenerator como generador
discriminator = cnn_learner(dls, resnet18, metrics=accuracy)
generator = ComplexGenerator()

gan = GAN(generator, discriminator.model[0])

# Entrenar la GAN
learn = GANLearner(dls, gan, opt_func=partial(Adam, mom=0.9, sqr_mom=0.99, wd=0.1))

# Entrenar la GAN
learn.fit(10, 2e-4)
